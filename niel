#!/usr/bin/env bb

(require '[babashka.fs :as fs]
         '[clojure.string :as str]
         '[selmer.parser :as parser])

(def user-name "Garrett M Rowe")
(def user-email "garrett.m.rowe@gmail.com")
(def current-year (.getValue (java.time.Year/now)))

(defn gen-config
  [args]
  {:year (.getValue (java.time.Year/now))
   :user-name "Garrett M Rowe"
   :user-email "garrett.m.rowe@gmail.com"
   :template-dir ["resources"]
   :namespace (first args)
   :root-path (str/replace (first args) \- \_)})

(defn template-path
  [template-name template-dir]
  (->> [template-name]
       (concat template-dir)
       (str/join fs/file-separator)))

(defn template-lines
  [template-name config]
  (-> template-name
      (template-path (:template-dir config))
      (parser/render-file config)
      str/split-lines))

(defn create-dir
  [{:keys [output-path]} {:keys [namespace]}]
  (when output-path
    (let [path (apply fs/path namespace output-path)]
      (when-not (fs/exists? path) (fs/create-dirs path)))))

(defn create-file
  [{:keys [template-name output-path output-filename]} config]
  (when (and template-name output-path output-filename)
    (let [full-output-path
          (apply fs/path
                 (concat [(:namespace config)] output-path [output-filename]))]
      (fs/write-lines full-output-path (template-lines template-name config)))))

(defn set-permissions
  [{:keys [output-path output-filename permissions]} {:keys [namespace]}]
  (when permissions
    (let [full-output-path
          (apply fs/path (concat [namespace] output-path [output-filename]))]
      (fs/set-posix-file-permissions full-output-path permissions))))

(defn render
  [schema-element config]
  (create-dir schema-element config)
  (create-file schema-element config)
  (set-permissions schema-element config))

(defn schema
  [root-path]
  [{:template-name "main.clj"
    :output-path ["src" root-path]
    :output-filename "main.clj"}
   {:template-name "main_test.clj"
    :output-path ["test" root-path]
    :output-filename "main_test.clj"}
   {:template-name "user.clj" :output-path ["dev"] :output-filename "user.clj"}
   {:template-name "test"
    :output-path ["scripts"]
    :output-filename "test"
    :permissions "rwxr-xr-x"}
   {:template-name "deps.edn" :output-path ["."] :output-filename "deps.edn"}
   {:template-name "README.md" :output-path ["."] :output-filename "README.md"}
   {:template-name "MIT_LICENSE" :output-path ["."] :output-filename "LICENSE"}
   {:template-name "tests.edn" :output-path ["."] :output-filename "tests.edn"}
   {:template-name "zprint.edn"
    :output-path ["."]
    :output-filename ".zprint.edn"}
   {:template-name "gitignore" :output-path ["."] :output-filename ".gitignore"}
   {:template-name "dir-locals.el"
    :output-path ["."]
    :output-filename ".dir-locals.el"}
   {:output-path ["resources"]}])

(defn run
  [args]
  (let [{:keys [namespace root-path] :as config} (gen-config args)]
    (printf "Creating project: %s%n" namespace)
    (doseq [element (schema (:root-path config))] (render element config))))

(when (= *file* (System/getProperty "babashka.file")) (run *command-line-args*))

(comment
  (do
    (def namespc (atom "dummy-project"))
    (run [@namespc]))
)

(comment
  "**Clean**"
  (fs/delete-tree @namespc)
)

