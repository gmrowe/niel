#!/usr/bin/env bb

(require '[babashka.fs :as fs]
         '[clojure.string :as str]
         '[selmer.parser :as parser])

(def user-name "Garrett M Rowe")
(def user-email "garrett.m.rowe@gmail.com")
(def current-year (.getValue (java.time.Year/now)))

(defn gen-config
  [args]
  {:year (.getValue (java.time.Year/now))
   :user-name "Garrett M Rowe"
   :user-email "garrett.m.rowe@gmail.com"
   :template-dir ["resources"]
   :namespace (first args)
   :root-path (str/replace (first args) \- \_)})

(defn template-path
  [template-name template-dir]
  (->> [template-name]
       (concat template-dir)
       (str/join fs/file-separator)))

(defn template-lines
  [template-name config]
  (-> template-name
      (template-path (:template-dir config))
      (parser/render-file config)
      str/split-lines))

(defn render
  [template-name out-path config]
  (let [output-path (apply fs/path (:namespace config) out-path)]
    (fs/write-lines output-path (template-lines template-name config))))

(defn schema
  [root-path]
  [["main.clj" ["src" root-path "main.clj"]]
   ["main_test.clj" ["test" root-path "main_test.clj"]]
   ["user.clj" ["dev" "user.clj"]]
   ["test" ["scripts" "test"]]
   ["deps.edn" ["deps.edn"]]
   ["README.md" ["README.md"]]
   ["MIT_LICENSE" ["LICENSE"]]
   ["tests.edn" ["tests.edn"]]
   ["zprint.edn" [".zprint.edn"]]
   [".gitignore" [".gitignore"]]
   [".dir-locals.el" [".dir-locals.el"]]
   ; ["resources" []]
  ])

(defn run
  [args]
  (let [{:keys [namespace root-path] :as config} (gen-config args)]
    (printf "Creating project: %s%n" namespace)
    ;; Create `src/` directory
    (fs/create-dirs (fs/path namespace "src" root-path))
    ;; Create `test/` directory
    (fs/create-dirs (fs/path namespace "test" root-path))
    ;; Create `dev/` directory
    (fs/create-dirs (fs/path namespace "dev"))
    ;; Create `scripts/` directory with test runner script
    (fs/create-dirs (fs/path namespace "scripts"))
    ;; Create `resources/` directory (empty)
    (fs/create-dirs (fs/path namespace "resources"))
    (doseq [[template-name output-path] (schema (:root-path config))]
      (render template-name output-path config))
    ;; Make script executable
    (fs/set-posix-file-permissions (fs/path namespace "scripts" "test")
                                   "rwxr-xr-x")))

(when (= *file* (System/getProperty "babashka.file")) (run *command-line-args*))

(comment
  (do
    (def namespc (atom "dummy-project"))
    (run [@namespc]))
)

(comment
  "**Clean**"
  (fs/delete-tree @namespc)
)

