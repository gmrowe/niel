#!/usr/bin/env bb

;; TODO: use (moustache)[https://github.com/fhd/clostache] for templating
(require '[babashka.fs :as fs]
         '[clojure.string :as str]
         '[selmer.parser :as parser])

(def user-name "Garrett M Rowe")
(def user-email "garrett.m.rowe@gmail.com")
(def current-year (.getValue (java.time.Year/now)))

(defn gen-config
  [args]
  {:year (.getValue (java.time.Year/now))
   :user-name "Garrett M Rowe"
   :user-email "garrett.m.rowez@gmail.com"
   :template-dir ["resources"]
   :namespace (first args)
   :root-path (str/replace (first args) \- \_)})

(defn render
  [template-path output-path config]
  (fs/write-lines output-path
                  (-> template-path
                      str
                      (parser/render-file config)
                      str/split-lines)))

(defn run
  [args]
  (let [{:keys [namespace root-path] :as config} (gen-config args)]
    (printf "Creating project: %s" namespace)
    ;; Init `src/` directory
    (fs/create-dirs (fs/path namespace "src" root-path))
    ;; Render main.clj
    (render (fs/path "resources" "main.clj")
            (fs/path namespace "src" (:root-path config) "main.clj")
            config)
    ;; Init `test/` directory
    (fs/create-dirs (fs/path namespace "test" (:root-path config)))
    (render (fs/path "resources" "main_test.clj")
            (fs/path namespace "test" (:root-path config) "main_test.clj")
            config)
    ;; Init `dev/` directory
    (fs/create-dirs (fs/path namespace "dev"))
    (render (fs/path "resources" "user.clj")
            (fs/path namespace "dev" "user.clj")
            config)
    ;; Init `scripts/` directory with test runner script
    (fs/create-dirs (fs/path namespace "scripts"))
    (render (fs/path "resources" "test")
            (fs/path namespace "scripts" "test")
            config)
    ;; Make script executable
    (fs/set-posix-file-permissions (fs/path namespace "scripts" "test")
                                   "rwxr-xr-x")
    ;; Init `resources/` directory (empty)
    (fs/create-dirs (fs/path namespace "resources"))
    ;; Create deps.edn file
    (render (fs/path "resources" "deps.edn")
            (fs/path namespace "deps.edn")
            config)
    ;; Create README file
    (render (fs/path "resources" "README.md")
            (fs/path namespace "README.md")
            config)
    ;; Create LICENSE file
    (render (fs/path "resources" "LICENSE")
            (fs/path namespace "LICENSE")
            config)
    ;; Create tests.edn file
    (render (fs/path "resources" "tests.edn")
            (fs/path namespace "tests.edn")
            config)
    ;; Create .zprint.edn file
    (render (fs/path "resources" "zprint.edn")
            (fs/path namespace ".zprint.edn")
            config)
    ;; Create .gitignore file (empty)
    (fs/create-file (fs/path namespace ".gitignore"))
    ;; Create .dir-locals.el file (for emacs)
    (render (fs/path "resources" ".dir-locals.el")
            (fs/path namespace ".dir-locals.el")
            config)))

(when (= *file* (System/getProperty "babashka.file")) (run *command-line-args*))

(comment
  (do
    (def namespc (atom "dummy-project"))
    (run [@namespc]))
)

(comment
  "**Clean**"
  (fs/delete-tree @namespc)
)

