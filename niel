#!/usr/bin/env bb

;; TODO: use (moustache)[https://github.com/fhd/clostache] for templating
(require '[babashka.fs :as fs]
         '[clojure.string :as str]
         '[selmer.parser :as parser])

(def user-name "Garrett M Rowe")
(def user-email "garrett.m.rowe@gmail.com")
(def current-year (.getValue (java.time.Year/now)))

(defn gen-config
  [args]
  {:year (.getValue (java.time.Year/now))
   :user-name "Garrett M Rowe"
   :user-email "garrett.m.rowez@gmail.com"
   :template-dir ["resources"]
   :namespace (first args)
   :root-path (str/replace (first args) \- \_)})

(defn render
  [template-name out-path config]
  (let [template-path (str/join fs/file-separator
                                (concat (:template-dir config)
                                        (str/split template-name
                                                   (re-pattern
                                                    fs/file-separator))))
        output-path (apply fs/path (:namespace config) out-path)]
    (fs/write-lines output-path
                    ;; TODO: move this snippet to `template-lines` function
                    (-> template-path
                        (parser/render-file config)
                        str/split-lines))))


(defn run
  [args]
  (let [{:keys [namespace root-path] :as config} (gen-config args)]
    (printf "Creating project: %s%n" namespace)
    ;; Init `src/` directory
    (fs/create-dirs (fs/path namespace "src" root-path))
    (render "main.clj" ["src" root-path "main.clj"] config)
    ;; Init `test/` directory
    (fs/create-dirs (fs/path namespace "test" root-path))
    (render "main_test.clj" ["test" root-path "main_test.clj"] config)
    ;; Init `dev/` directory
    (fs/create-dirs (fs/path namespace "dev"))
    (render "user.clj" ["dev" "user.clj"] config)
    ;; Init `scripts/` directory with test runner script
    (fs/create-dirs (fs/path namespace "scripts"))
    (render "test" ["scripts" "test"] config)
    ;; Make script executable
    (fs/set-posix-file-permissions (fs/path namespace "scripts" "test")
                                   "rwxr-xr-x")
    ;; Init `resources/` directory (empty)
    (fs/create-dirs (fs/path namespace "resources"))
    ;; Create deps.edn file
    (render "deps.edn" ["deps.edn"] config)
    ;; Create README file
    (render "README.md" ["README.md"] config)
    ;; Create LICENSE file
    (render "MIT_LICENSE" ["LICENSE"] config)
    ;; Create tests.edn file
    (render "tests.edn" ["tests.edn"] config)
    ;; Create .zprint.edn file
    (render "zprint.edn" [".zprint.edn"] config)
    ;; Create .gitignore file (empty)
    (render ".gitignore" [".gitignore"] config)
    ;; Create .dir-locals.el file (for emacs)
    (render ".dir-locals.el" [".dir-locals.el"] config)))

(when (= *file* (System/getProperty "babashka.file")) (run *command-line-args*))

(comment
  (do
    (def namespc (atom "dummy-project"))
    (run [@namespc]))
)

(comment
  "**Clean**"
  (fs/delete-tree @namespc)
)

